<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Argparse</title><link href="http://www.argpar.se/" rel="alternate"></link><link href="http://www.argpar.se/feeds/all.atom.xml" rel="self"></link><id>http://www.argpar.se/</id><updated>2018-07-16T19:00:00+01:00</updated><entry><title>Permissions for Proxy models</title><link href="http://www.argpar.se/posts/programming/permissions-for-proxy-models" rel="alternate"></link><published>2018-07-16T19:00:00+01:00</published><updated>2018-07-16T19:00:00+01:00</updated><author><name>Jonathan Sundqvist</name></author><id>tag:www.argpar.se,2018-07-16:/posts/programming/permissions-for-proxy-models</id><summary type="html">&lt;p&gt;Proxy models are pretty useful if you want to create a new customized view in django admin. Let's say that you have a normal model and that you need a specific view where you can do bulk uploads. Creating a proxy model from your normal model and then using the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Proxy models are pretty useful if you want to create a new customized view in django admin. Let's say that you have a normal model and that you need a specific view where you can do bulk uploads. Creating a proxy model from your normal model and then using the django admin on top of your new proxy model gets you a clean separation of the regular list view and your custom django admin view.&lt;/p&gt;
&lt;p&gt;So you've created your custom django view and you want that appropriately permissioned like the normal models are. That is, it'll have the following three permissions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add permission&lt;/li&gt;
&lt;li&gt;delete permission&lt;/li&gt;
&lt;li&gt;change permission&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To your surprise when creating and migrating your proxy model it doesn't create any permissions at all for you. It's quite an annoyance unless you know about it. There has been a &lt;a href="https://code.djangoproject.com/ticket/11154"&gt;long-standing ticket&lt;/a&gt; open for exactly this.&lt;/p&gt;
&lt;p&gt;When the migration of your proxy model has been created, you can add the following code to the migration to get the appropriate permissions as you'd expect it to have. Then use &lt;code&gt;migrations.RunPython(create_permissions)&lt;/code&gt; as an added operation. As you can see in the &lt;a href="https://docs.djangoproject.com/en/2.0/topics/migrations/#data-migrations"&gt;django documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.management&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;_get_all_permissions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Permission&lt;/span&gt;

    &lt;span class="n"&gt;YourModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app_label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ModelName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;codename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_get_all_permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;codename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;codename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also a &lt;a href="https://gist.github.com/magopian/7543724"&gt;gist&lt;/a&gt; around describing how you could add a post-migrate signal so that proxy models always get their appropriate permissions.&lt;/p&gt;</content><category term="django"></category><category term="python"></category><category term="django-admin"></category><category term="programming"></category></entry><entry><title>Testing Django admin</title><link href="http://www.argpar.se/posts/programming/testing-django-admin" rel="alternate"></link><published>2018-07-08T14:10:00+01:00</published><updated>2018-07-08T14:10:00+01:00</updated><author><name>Jonathan Sundqvist</name></author><id>tag:www.argpar.se,2018-07-08:/posts/programming/testing-django-admin</id><summary type="html">&lt;p&gt;It's not exactly crystal clear how to test the functionalities that you add to django admin without diving into the source code of Django. So here are a few tips and snippets that'll help.&lt;/p&gt;
&lt;h2&gt;Testing ModelAdmin methods&lt;/h2&gt;
&lt;p&gt;When you come to the point that you need to override any of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's not exactly crystal clear how to test the functionalities that you add to django admin without diving into the source code of Django. So here are a few tips and snippets that'll help.&lt;/p&gt;
&lt;h2&gt;Testing ModelAdmin methods&lt;/h2&gt;
&lt;p&gt;When you come to the point that you need to override any of the &lt;a href="admin_methods"&gt;ModelAdmin methods&lt;/a&gt; how do you go about testing them? You could do it through the &lt;code&gt;client&lt;/code&gt; and make a POST request to the view that saves the model, but that is a lot of work.&lt;/p&gt;
&lt;p&gt;Most of the ModelAdmin methods requrie a request. So if we mock that out, we can quite easily test the method without taking much else into account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin.sites.import&lt;/span&gt; &lt;span class="nn"&gt;AdminSite&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockSuperUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MockRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MockSuperUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyAdminTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Testcase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AdminSite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_delete_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way you don't need to focus much at all on the request argument and can focus on asserting on any side effects or other functionalities that your modified ModelAdmin methods does.&lt;/p&gt;
&lt;h2&gt;Testing a file upload in Django admin&lt;/h2&gt;
&lt;p&gt;If you're about to test an admin view where you upload some file, you'll need to use the test &lt;code&gt;Client&lt;/code&gt; that django has in the &lt;code&gt;TestCase&lt;/code&gt; class. Django has &lt;a href="admin_post"&gt;some documentation&lt;/a&gt; around how that works.&lt;/p&gt;
&lt;p&gt;The post method takes a path and a dictionary of DATA arguments. If one of these arguments is a file like object you'll be able to access it as &lt;code&gt;request.FILES&lt;/code&gt; in the response.&lt;/p&gt;
&lt;p&gt;To test your file upload it would look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;  &lt;span class="c1"&gt;# you could use StringIO as well&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# the file in this case is modeled as a simple csv&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;model_id&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_file_upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# each admin url consits of the following three things&lt;/span&gt;
        &lt;span class="c1"&gt;# the app name, the name of the model and the name of the view&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin:appname_modelname_viewname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form_filefield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;# Here you&amp;#39;ll want to do extra assertions, ie are you&lt;/span&gt;
        &lt;span class="c1"&gt;# saving the file in a model, streaming something back in&lt;/span&gt;
        &lt;span class="c1"&gt;# streamingresponse or doing something else.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file like object you also be a file handler as in this example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some_file.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form_filefield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Though I find that if you just want to test something not too complex it's easier to use either &lt;code&gt;BytesIO&lt;/code&gt; or &lt;code&gt;StringIO&lt;/code&gt; and construct the file content in place rather than having file fixtures.&lt;/p&gt;
&lt;p&gt;Do you find that there are other tricky bits testing the django admin, &lt;a href="argparse"&gt;tweet me&lt;/a&gt; and I'll add it!&lt;/p&gt;</content><category term="python"></category><category term="django"></category><category term="programming"></category><category term="django-admin"></category></entry><entry><title>Getting an email with your own domain</title><link href="http://www.argpar.se/posts/misc/getting-an-email-with-your-own-domain" rel="alternate"></link><published>2018-07-04T23:27:00+01:00</published><updated>2018-07-04T23:27:00+01:00</updated><author><name>Jonathan Sundqvist</name></author><id>tag:www.argpar.se,2018-07-04:/posts/misc/getting-an-email-with-your-own-domain</id><summary type="html">&lt;p&gt;There are many compelling reasons to have an email address with your own domain. My personal motivation is that you become a lot more independant from the tech giants. I've been using gmail for many years and stories  where google has &lt;a href="goog1"&gt;completely&lt;/a&gt; &lt;a href="goog2"&gt;locked&lt;/a&gt; &lt;a href="goog3"&gt;down&lt;/a&gt; their google account are particularly frightening …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many compelling reasons to have an email address with your own domain. My personal motivation is that you become a lot more independant from the tech giants. I've been using gmail for many years and stories  where google has &lt;a href="goog1"&gt;completely&lt;/a&gt; &lt;a href="goog2"&gt;locked&lt;/a&gt; &lt;a href="goog3"&gt;down&lt;/a&gt; their google account are particularly frightening.&lt;/p&gt;
&lt;p&gt;So here we are, taking the first step in becoming independant from tech giants and be among the cool kids that have their own domain. Let me tell you a secret, getting your own domain is neither particularly difficult nor expensive.&lt;/p&gt;
&lt;p&gt;So let's get started!&lt;/p&gt;
&lt;h2&gt;Registering your domain&lt;/h2&gt;
&lt;p&gt;There are many places where you can register a domain and I'm going to recommend &lt;a href="gandi"&gt;gandi&lt;/a&gt;. They've got helpful support, you get storage space for your email included in the domain and they've got an excellent selection of all the new fancy domains that you can get. If the domain were available you could get an email like &lt;code&gt;Iam@sleeping.today&lt;/code&gt;, lot's of fun &lt;a href="gandi_search"&gt;picking out&lt;/a&gt; a domain for yourself!&lt;/p&gt;
&lt;p&gt;So once you've decided what domain you want and completed the checkout process at Gandi. You now own your own domain! That wasn't that difficult. So let's proceed to make sure that you have an email that you can use with your domain.&lt;/p&gt;
&lt;h3&gt;Configuring your email&lt;/h3&gt;
&lt;p&gt;Once you're logged in you can click on "Domains" and then continue to click on the domain that you registered. Here you can see that automatic renewal is on by default. You'll definitely want that otherwise your email address would stop working after a year which is no good.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create your email at gandi" src="http://www.argpar.se/images/your-own-email/create-email-address.png"&gt;&lt;/p&gt;
&lt;p&gt;In the menu to the left you can select "Email", it'll then show you the screen you see above. Clicking on creating a gandi mail will let you create a new email address for yourself. The password will be used for logging into the &lt;a href="gandimail"&gt;webmail&lt;/a&gt; that gandi has or for connecting the email to an email client such as Thunderbird.&lt;/p&gt;
&lt;p&gt;Alias means that these combinations also goes to the email that you're registering. In other words, if you create the email email@world.com and you put the alias, "hello" and "test" as alias. The emails "email@world.com", "hello@world.com" and "test@world.com" will all be valid.&lt;/p&gt;
&lt;p&gt;You're probably already using some other email. So if you want to continue doing that for a while you can forward the email from your new address to your old email address. Make sure that you also forward email to the address that you just created. Otherwise it'll skip the gandi inbox completely, the goal is to keep your email there after all.&lt;/p&gt;
&lt;p&gt;Now is the time to ask a friend of yours to send an email to your newly created email to make sure that it works and that forwarding works as expected if you set that up!&lt;/p&gt;
&lt;p&gt;Congrats! You now have your own domain with an email that you can use! Go forth and email your friends about this article and encourage them to create their own email address ;).&lt;/p&gt;
&lt;h3&gt;SPF records or spam prevention&lt;/h3&gt;
&lt;p&gt;There are a couple of more things that you can do. Right now if you try to send an email to a gmail user, it'll look somewhat suspicious, as in in Gmail warns the user it can't verify whether the email was sent by you or someone else.&lt;/p&gt;
&lt;p&gt;That's because gmail can't really tell right now whether the person who sent this is the person who actually owns the email address. You can remedy this by creating something called a &lt;a href="spfwiki"&gt;SPF record&lt;/a&gt;. In short, it's as an email validation policy which is designed to detect and block spoofing. It will prevent spammers form using your domain to send unauthorized emails.&lt;/p&gt;
&lt;p&gt;The &lt;a href="spfgandi"&gt;SPF record&lt;/a&gt; for gandi.net looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; @ 10800 IN TXT &amp;quot;v=spf1 include:_mailcust.gandi.net ~all&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To activate the SPF record. Go to &lt;code&gt;DNS Records&lt;/code&gt; which you can find among the options for your particular domain. Once there add a new record. You'll arrive to a form where you can set things up. The type should be TXT. The rest of the options should be filled in like this to generate the SPF record above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TTL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10800&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;
&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;spf1&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;_mailcust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gandi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;net&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you scroll down you can view all the DNS records, and you'll find that it looks like the SPF record in the stated above.&lt;/p&gt;
&lt;h2&gt;Use your new email with Gmail&lt;/h2&gt;
&lt;p&gt;If you are a gmail user, and still hesitant to give up gmail just yet, but would still want to use the email that you just created. That's entirely possible, presumably you've already chosen to forward your email to that email address of yours. The next step is being able to send email from the email address you created from within gmail.&lt;/p&gt;
&lt;p&gt;Go into the gmail settings. At the top there are several tabs, the tab you should be looking for is "Accounts and Import".&lt;/p&gt;
&lt;p&gt;Right there it says that you &lt;code&gt;send email as&lt;/code&gt;. If you click the link to add a new email address there will be a popup that asks you to fill in the following fields. The port should be 587.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SMTP server: mail.gandi.net
username: youremail@yourdomain.com
password: the password for your email
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once that is done gmail will send an email to that address to verify that it is yours. Click the link in the email and you can now send email using your newly created email address!&lt;/p&gt;
&lt;p&gt;Then there is also the option of doing the opposite, forwarding email from your gmail account to your new email. Which perhaps is a better option in case you're trying to wean yourself off gmail.&lt;/p&gt;
&lt;p&gt;Happy emailing, and send me an email if there is anything that I should clarify :)&lt;/p&gt;</content><category term="tutorial"></category><category term="email"></category></entry><entry><title>How to create a free website or blog</title><link href="http://www.argpar.se/posts/tutorial/how-to-create-a-free-website-or-blog" rel="alternate"></link><published>2015-06-07T20:00:00+01:00</published><updated>2015-06-07T20:00:00+01:00</updated><author><name>Jonathan Sundqvist</name></author><id>tag:www.argpar.se,2015-06-07:/posts/tutorial/how-to-create-a-free-website-or-blog</id><summary type="html">&lt;p&gt;There are many options out there if you want to create your own website. But if you want customizability and still come away on the cheap the options shrink considerably. However if you create your website with something called a static site generator you'll be able to achieve exactly this. The only thing that you'll have to pay for in the end is the domain.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Pelican" src="http://www.argpar.se/images/pelican.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There are many options out there if you want to create your own website. But if you want customizability and still come away on the cheap the options shrink considerably. However if you create your website with something called a static site generator you'll be able to achieve exactly this. The only thing that you'll have to pay for in the end is the domain. (Though, to be fair if you don't mind ads you could use a &lt;a href="dot.tk"&gt;dot.tk&lt;/a&gt; domain). &lt;/p&gt;
&lt;p&gt;So let's get down to business. &lt;/p&gt;
&lt;h2&gt;Host your website&lt;/h2&gt;
&lt;p&gt;Your website needs to be hosted somewhere and the easiest and cheapest solution is by far to host it on Github. If you don't have an account there yet now is the time to create one! &lt;/p&gt;
&lt;p&gt;Create a &lt;a href="https://github.com/new"&gt;new repo&lt;/a&gt; and name it anything you like. The easiest way to manage this repo is through the git client that &lt;a href="http://git-scm.com/downloads/guis"&gt;Github itself developed&lt;/a&gt;. So it would either be Github for Mac or Windows. If you're comfortable with git you already know what to do. If you are unfamiliar with git and would like to understand how it works I would recommend that you take a look at &lt;a href="https://www.git-tower.com/learn/git/videos"&gt;some videos&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Cloning github" src="http://www.argpar.se/images/github-clone.png"&gt;&lt;/p&gt;
&lt;p&gt;When you've downloaded the client you can choose to clone the repo that you already created onto your harddrive. That way you'll have a local copy of all the data in the repo which you can then push to remote repo at Github. &lt;/p&gt;
&lt;p&gt;At the moment you only have blank folder, the next step is to set up the static site generator that will magically get your website up and running. &lt;/p&gt;
&lt;h2&gt;Installing Pelican, the software for your website&lt;/h2&gt;
&lt;p&gt;There are a couple of static site generators out there. One of them is Pelican which we will be using today. However, before you can install Pelican you'll need to have Python and Pip installed as well. You can find the instructions on how to get that installed for your OS &lt;a href="http://docs.python-guide.org/en/latest/"&gt;right here&lt;/a&gt;. Generally I would recommend that you get python 3 installed. Python 2.7 works equally well though. &lt;/p&gt;
&lt;p&gt;Now you've got all the requirements for installing Pelican. To install Pelican create a file named &lt;code&gt;requirements.txt&lt;/code&gt; in the empty folder that you cloned from Github. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt; should contain the following: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;markdown
git+https://github.com/getpelican/pelican.git
ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the installation started go to the commandline and into the directory with &lt;code&gt;requirements.txt&lt;/code&gt;, then type in &lt;code&gt;pip3 -r requirements.txt&lt;/code&gt; or &lt;code&gt;pip -r requirements.txt&lt;/code&gt; if you have python 2.7 installed. &lt;/p&gt;
&lt;p&gt;You should see the installation happening and once it's done you can install all the necessary files with the command &lt;code&gt;pelican-quickstart&lt;/code&gt;. At this point you'll have to answer a couple of questions about your future website. This will generate some basic settings for your website. We will take a closer look at these settings further down. &lt;/p&gt;
&lt;p&gt;I'm going to assume that you will answer yes to the question on generating a Fabfile/Makefile. I will also assume that you answer yes to wanting a an auto-reload script. I promise, it will make your life easier! After those two questions it will ask you questions about where you want to host your website. Keep answering no until until it asks you if you want tu use GitHub Pages. It will then ask you if you want to use your personal page and you should answer no to that. What you'll be using is called a project page. &lt;/p&gt;
&lt;h2&gt;Creating pages for your website with Pelican&lt;/h2&gt;
&lt;p&gt;After the inquisitive questions you've got more more files in your folder and it should looks something like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;your website/
├── content
|   ├── (name_of_category)
│   └── (pages)
├── output
├── develop_server.sh
├── fabfile.py
├── Makefile
├── pelicanconf.py       # Main settings file
└── publishconf.py       # Settings to use when ready to publish
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the content folder you can now create a new file with the file extension &lt;code&gt;your_blogpost.md&lt;/code&gt;. At the very top of the file you created you'll have some meta data about the the blog post. Which will look something like this. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;
&lt;span class="nl"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;
&lt;span class="nl"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;
&lt;span class="nl"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="nl"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;different&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;than&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="nl"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Jonathan&lt;/span&gt; &lt;span class="n"&gt;Sundqvist&lt;/span&gt;
&lt;span class="nl"&gt;Summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Trying&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;adding&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;won&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;So&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="nl"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;category_folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;another_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all you need for a blog post. If you want your posts ordered in folders you'll have to make sure that category is set in the posts, as there is a setting that automatically uses folders as categories if no category is used in the post itself. &lt;/p&gt;
&lt;p&gt;To add a page instead of just a blog post you'll place the markdown file in the pages folder. For a page the only two things you need is a "title" and "status" which can either be "published", "draft" or "hidden". If a page is hidden it's published but won't show up in any menus that pages normally show up in. &lt;/p&gt;
&lt;p&gt;By default the url structure will be &lt;code&gt;yoursite.com/pages/my-page&lt;/code&gt;. However you can change the url structure as you please as described in the example below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thispath&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;
&lt;span class="n"&gt;save_as&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thispath&lt;/span&gt;&lt;span class="sr"&gt;/about-me/i&lt;/span&gt;&lt;span class="n"&gt;ndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact once you've created these two pages. You can view what your website looks like locally. If you type in &lt;code&gt;make devserver&lt;/code&gt; into the terminal. It will start to generate the website for you. Once that's done you can try to visit your website at the following address &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;. That's what it will look like. Perhaps you want it to look differently? Then continue to read on and we will make those changes as well.  &lt;/p&gt;
&lt;h2&gt;How to manage pelican's website settings&lt;/h2&gt;
&lt;p&gt;Now that you've installed pelican and run the command &lt;code&gt;pelican-quickstart&lt;/code&gt; there are already two files used as settings in the folder for your website; &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. This is where all the settings are stored. To quickly get up to speed I would suggest that you copy the settings that aren't the same from &lt;a href="https://github.com/jonathan-s/argpar.se/"&gt;my github repository&lt;/a&gt;. That way you can customize the settings more quickly. &lt;/p&gt;
&lt;p&gt;Now that you've copied the settings. Let's take a closer look at what some of them do. &lt;code&gt;pelicanconf.py&lt;/code&gt; is where you set the base settings. Any settings that needs to be different when publishing should be set in &lt;code&gt;publishconf.py&lt;/code&gt;. It   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SLUGIFY_SOURCE&lt;/code&gt; - This is what input it will use to create a slug, that is, a url-friendly link. It makes most sense to leave it as title.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH_FUTURE_DATES&lt;/code&gt; - If let this option be "False" it won't publish posts that are still in the future. This way you can schedule posts. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; - This is the folder where all your pages or blog posts in markdown will be as well as any extra folders that you want to end up on the website. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;THEME&lt;/code&gt; - This is the name of the theme you will be using. When you've just pelican you'll only have one theme. There are more &lt;a href="http://pelicanthemes.com/"&gt;themes to download &lt;/a&gt;. Once you've downloaded a theme you can install it with the following command &lt;code&gt;pelican-themes -s path/to/themefolder&lt;/code&gt;. You can then verify that it's installed with &lt;code&gt;pelican-themes -l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_PATHS&lt;/code&gt; - Here you can create folders that will be created as urls for the website. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; - If you don't want the files in the static path to have a different path you can change that here. And follow the structure in my &lt;a href="https://github.com/jonathan-s/argpar.se/blob/master/pelicanconf.py#L52"&gt;pelicanconf.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*_URL&lt;/code&gt; and &lt;code&gt;*_SAVE_AS&lt;/code&gt; - these define the url structure of your website for your pages and posts and they have to correlate with each other. So if you want the url of an article to be &lt;code&gt;posts/{category}/{slug}&lt;/code&gt; you'll also have to save as &lt;code&gt;posts/{category}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These should be the most important ones. There are other settings that you can read about in &lt;a href="http://docs.getpelican.com/"&gt;the manual &lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Getting the website live and creating a domain&lt;/h2&gt;
&lt;p&gt;Now that you've gotten everything set up the way you want it's time to get the website live. After you've made sure that everything looks good in the browser using &lt;code&gt;make devserver&lt;/code&gt; we can take the step to get it live on internet. &lt;/p&gt;
&lt;p&gt;You can do that with the simple command &lt;code&gt;make github&lt;/code&gt; and that will generate the website and publish all the html files in the repo that you created earlier. &lt;/p&gt;
&lt;p&gt;Now you can go to &lt;code&gt;http://your-username.github.io/your-repo&lt;/code&gt; and view your website. It's live! &lt;/p&gt;
&lt;p&gt;The last step of this tutorial will be to create a domain for your website. I'm going to use &lt;a href="www.gandi.net"&gt;Gandi&lt;/a&gt;. They have a huge selection of domains, they don't collect your data if you don't want them to and generally they have &lt;a href="https://www.gandi.net/no-bullshit"&gt;good attitude&lt;/a&gt;. So they are definitely a good option! &lt;/p&gt;
&lt;p&gt;Once you have created your domain you'll have to make changes to the what Gandi calls the &lt;a href="https://wiki.gandi.net/en/dns/zone/edit"&gt;'Zone file'&lt;/a&gt;. It will look like the image below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Zone file at Gandi" src="http://www.argpar.se/images/zone-file.png"&gt;&lt;/p&gt;
&lt;p&gt;Create a new version of the Zone file and add a new record. The type you should use when you add a new record is &lt;code&gt;CNAME&lt;/code&gt;. The name has to be &lt;code&gt;www&lt;/code&gt;. So in the end the address would be &lt;code&gt;www.your-domain.com&lt;/code&gt; to your website. The value on the other hand should be &lt;code&gt;your-username.github.io.&lt;/code&gt;. It's important that you have that last dot, otherwise it won't work. After you've added the record, start using the zone file that you just modified. It will take a couple of hours before the changes apply to the domain. &lt;/p&gt;
&lt;p&gt;While you are waiting you can make one final change to the settings of your website. Create a new folder called &lt;code&gt;extra&lt;/code&gt; in your &lt;code&gt;content&lt;/code&gt; folder where you have all your files. In this new folder create a file named &lt;code&gt;CNAME&lt;/code&gt; with capital letters. In this file write a single line with your domain. It should look something like this: &lt;code&gt;www.your-domain.com&lt;/code&gt;. The last thing you need to do is to add this line: &lt;code&gt;'extra/CNAME': {'path': 'CNAME'}&lt;/code&gt; to &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; in &lt;code&gt;pelicanconf.py&lt;/code&gt;. Execute &lt;code&gt;make github&lt;/code&gt; in the terminal to upload the changes to github again and you're good to go. &lt;/p&gt;
&lt;p&gt;When you next visit your domain you should now see your website! Congratulations, you now have your own website! If you have any questions. Ask away!&lt;/p&gt;</content><category term="blog"></category><category term="pelican"></category><category term="web development"></category></entry></feed>